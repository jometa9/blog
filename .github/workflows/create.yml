name: Create Post from Issue Form

on:
  issues:
    types: [opened, edited]

jobs:
  create-post:
    runs-on: ubuntu-latest

    if: contains(join(github.event.issue.labels.*.name, ','), 'new-post')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Create post file from Issue Form
        run: |
          # Capturamos el Issue body como siempre
          BODY="${{ github.event.issue.body }}"
      
          # 1) Elimina comillas inicial y final, si existieran
          CLEAN_BODY=$(echo "$BODY" | sed 's/^"//; s/"$//')
      
            # 2) Convierte "\n" literales en saltos de l√≠nea reales
          #    (solo si ves que tu body incluye esos caracteres en lugar de saltos reales).
          CLEAN_BODY=$(echo "$CLEAN_BODY" | sed 's/\\n/\n/g')
      
          echo "=== Body debug AFTER cleaning ==="
          echo "$CLEAN_BODY" | cat -A
          echo "================================="
        
          # Function: looks for the EXACT line "### <heading>", then prints the next line
          function get_value_after_heading() {
            local heading="^### $1$"
            echo "$CLEAN_BODY" \
              | sed 's/\r//g' \
              | sed 's/[ \t]*$//g' \
              | awk -v heading="$heading" '
                  $0 ~ heading {
                    getline
                    gsub(/\r$/, "", $0)
                    print $0
                    exit
                  }
                '
          }
      
          # Extraer cada campo
          TITLE=$(get_value_after_heading "Title")
          DATE=$(get_value_after_heading "Date")
          VISIBLE=$(get_value_after_heading "Visible")
          QUOTE=$(get_value_after_heading "Quote")
          SLUG=$(get_value_after_heading "Slug")
          YOUTUBE=$(get_value_after_heading "YouTube ID")
      
          echo "TITLE=$TITLE"
          echo "DATE=$DATE"
          echo "VISIBLE=$VISIBLE"
          echo "QUOTE=$QUOTE"
          echo "SLUG=$SLUG"
          echo "YOUTUBE=$YOUTUBE"
        
          # Generar el nombre de archivo
          DATESTAMP=$(date +%Y-%m-%d-%H-%M-%S)
          FILENAME="${SLUG}.md"
      
          # Asegurarse de que la carpeta 'posts' exista
          mkdir -p posts
        
          # Crear el archivo Markdown con el frontmatter + iframe
          {
            echo "---"
            echo "title: $TITLE"
            echo "date: $DATE"
            echo "visible: $VISIBLE"
            echo "quote: $QUOTE"
            echo "slug: '$SLUG'"
            echo "---"
            echo
            echo "<iframe src=\"https://www.youtube.com/embed/$YOUTUBE\" allowfullscreen></iframe>"
          } > "posts/$FILENAME"
      
          # Hacer commit y push
          git add "posts/$FILENAME"
          git commit -m "Add post from Issue: $TITLE"
        

      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
